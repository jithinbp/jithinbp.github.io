{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "index.html", "title": "jithinbp.in HI!", "text": ""}, {"location": "index.html#inauguration", "title": "Inauguration", "text": ""}, {"location": "CAEN.html", "title": "CAEN Digitizer data collection and viewing on Ubuntu", "text": "<p>DT5743 is what i have, but the instructions will work for a wide range</p>"}, {"location": "CAEN.html#setup-toolchain", "title": "Setup toolchain", "text": "<p>Install Packages from CAEN</p> <ul> <li>CAENVMELib-v4.0.2</li> <li>CAENComm-v1.7.0</li> <li>CAENDigitizer-v2.17.3</li> <li>CAENUSBdrvB-v1.6.0 : Get specific drivers for your device from CAEN</li> <li>caenwavedemo_x743-1.2.1</li> </ul>"}, {"location": "CAEN.html#installing", "title": "Installing", "text": "<p>Dependencies : glibc and libusb are required. along with the build tools like make.</p> <p>you can check glibc version</p> <p><pre>jithin@jithin-Victus:~$ ldd \u2013version | head -n1\nldd (Ubuntu GLIBC 2.35-0ubuntu3.8) 2.35\n</pre></p> <p>minimum version 2.11 is asked by CAEN.</p> <p>The first 4 packages are simply <code>sudo ./install_x64</code> , except the USBdrv where you make need to do <code>make</code> followed by <code>sudo make install</code> if you do not want to use DKMS.</p> <p>There are some sample programs inside CAENDigitizer which you can try to compile using <code>make</code></p>"}, {"location": "CAEN.html#wavedemo", "title": "Wavedemo", "text": "<p>gnuplot is needed. you can get it from synaptic.</p> <p>There seems to be a redefinition bug in <code>include/Wavedemo.h</code> for which Cursor easily suggested a fix. Change the enum definitions in that file to what\u2019s shown below to avoid redefinition errors.</p> <pre><code>typedef enum {\n\tWPLOT_MODE_1BD,\t\t//plots only output waveforms of one board at a time without any processing\n\tWPLOT_MODE_1CH,\t\t//plots analogue and digital waveforms of one channel at a time\n\tWPLOT_MODE_STD,\t\t//plots analogue and digital waveforms of events\n\n\tWPLOT_MODE_DUMMY_LAST\n} WPLOT_MODE_t;\n\ntypedef enum {\n\tHPLOT_DISABLED,\n\tHPLOT_TIME,\n\tHPLOT_ENERGY,\n\n\tHPLOT_TYPE_DUMMY_LAST\n} HPLOT_TYPE_t;\n</code></pre> <p>MAKE and INSTALLATION</p> <pre><code>./configure CFLAGS=-O2\nmake\nsudo make install\n</code></pre>"}, {"location": "CAEN.html#execute-wavedemo-user-manual", "title": "Execute Wavedemo. User Manual", "text": "<pre><code>WaveDemo_x743 WaveDemoConfig.ini\n</code></pre> <p>The config file contains all info. I have attached my config file below. Notice that I have set all SAVE_DATA options to NO because it fills up a few gigs within minutes, and I only have like 2GB of space left :(</p> WaveDemoConfig.ini : I am only using CH0 on board 1 <pre><code># ****************************************************************\n# WaveDemo_x743 Configuration File\n# ****************************************************************\n\n# ----------------------------------------------------------------\n# Board Connection Parameters\n# ----------------------------------------------------------------\n[CONNECTIONS]\n\n# OPEN &lt;N&gt;: open the digitizer\n# options: USB 0 0                  Desktop/NIM digitizer through USB (direct to USB)\n#          USB 0 BA                 VME digitizer through USB-V1718/V3718 (BA = BaseAddress of the VME board, 32 bit hex)\n#          PCI 0 0 0                Desktop/NIM/VME through CONET (optical link) \n#          PCI 0 0 BA               VME digitizer through V2718/V3718 (BA = BaseAddress of the VME board, 32 bit hex) \n#          USB_A4818 X 0 0          Desktop/NIM digitizer through USB-&gt;A4818-&gt;CONET (X is the PID (product id) of A4818)\n#          USB_A4818_V2718 X 0 BA   VME digitizer through USB-A4818-V2718 (BA = BaseAddress of the VME board, 32 bit hex) (X is the PID (product id) of A4818)\n#          USB_A4818_V3718 X 0 BA   VME digitizer through USB-A4818-V3718 (BA = BaseAddress of the VME board, 32 bit hex) (X is the PID (product id) of A4818)\n#          USB_A4818_V4718 X 0 BA   VME digitizer through USB-A4818-V4718 (BA = BaseAddress of the VME board, 32 bit hex) (X is the PID (product id) of A4818)\n#          ETH_V4718 IP 0 BA        VME digitizer through ETH-V4718 (BA = BaseAddress of the VME board, 32 bit hex) (IP is the IP Address of the V4718)\n#          USB_V4718 X 0 BA         VME digitizer through USB-V4718 (BA = BaseAddress of the VME board, 32 bit hex) (X is the PID (product id) of V4718)\n#\n# for multiple boards, OPEN 0 indicates the master board\n\n# example for using two VME digitizer through USB-V1718 (uncomment the two lines below)\n#OPEN 0 = USB 0 32110000\n#OPEN 1 = USB 0 32100000\n\n# example for using two VME digitizer through ETH-V4718 (uncomment the two lines below)\n#OPEN 0 = ETH_V4718 192.168.1.254 0 32110000\n#OPEN 1 = ETH_V4718 192.168.1.254 0 32100000\n\n# examples for using one digitizer (uncomment just one of the lines below)\nOPEN 0 = USB 0 0\n#OPEN 0 = USB 0 32100000\n#OPEN 0 = PCI 0 0 0\n#OPEN 0 = PCI 0 0 32100000\n#OPEN 0 = ETH_V4718 192.168.1.254 0 32100000\n#OPEN 0 = USB_V4718 12345 0 32100000\n#OPEN 0 = USB_A4818 12345 0 0 \n#OPEN 0 = USB_A4818_V2718 12345 0 32100000\n\n\n# ----------------------------------------------------------------\n# Program options\n# ----------------------------------------------------------------\n[OPTIONS]\n\n# GNUPLOT_PATH: path to gnuplot executable file (optional if it is already in environment variables)\nGNUPLOT_PATH = /usr/bin/\n\n# DATAFILE_PATH: path to save output file (the folder will be created if it does not exist)\nDATAFILE_PATH = ./data_output/\n\n# SAVE_RAW_DATA: enable/disable raw data file saving\nSAVE_RAW_DATA = NO\n# SAVE_TDC_LIST: enable/disable saving of the Trigger Time Tag list\nSAVE_TDC_LIST = YES\n# SAVE_WAVEFORM: enable/disable waveform file saving (of filtered events)\nSAVE_WAVEFORM = NO\n# SAVE_ENERGY_HISTOGRAM: enable/disable file saving with energy histogram\nSAVE_ENERGY_HISTOGRAM = YES\n# SAVE_TIME_HISTOGRAM: enable/disable file saving with time histogram\nSAVE_TIME_HISTOGRAM = NO\n# SAVE_LISTS: enable/disable list file saving (of filtered events)\nSAVE_LISTS = NO\n# SAVE_RUN_INFO: enable run info file saving\nSAVE_RUN_INFO = NO\n\n# OUTPUT_FILE_FORMAT: output file can be either ASCII or binary (raw data files are always binary)\n# options: BINARY, ASCII\nOUTPUT_FILE_FORMAT = ASCII\n\n# OUTPUT_FILE_HEADER: if enabled, the header is included in the output file data\n# options: YES, NO\nOUTPUT_FILE_HEADER = YES\n\n# OUTPUT_FILE_TIMESTAMP_UNIT: unit for the time stamps in the output list files\n# options: 0=ps, 1=ns, 2=us, 3=ms, 4=s\nOUTPUT_FILE_TIMESTAMP_UNIT = 1 \n\n# STATS_ENABLE: enable/disable updating and printing statistics while acquisition\n# options: YES, NO\nSTATS_RUN_ENABLE = YES\n# PLOT_ENABLE: enable/disable waveform plotting when the run starts\n# options: YES, NO\nPLOT_RUN_ENABLE = YES\n\n# DGTZ_RESET: specify if the boards are reset before their programming\n# options: YES, NO\nDGTZ_RESET = YES\n\n# SYNC_ENABLE: enable for working with multiple boards synchronized \n# options: YES, NO (N.B.: if enabled you must use TRIGGER_TYPE = EXTERN)\nSYNC_ENABLE = NO\n\n# TRIGGER_FIXED: fix the trigger of the reference channel in percent of the whole acquisition window\n# values: 10 to 90 (%) (default = 20)\nTRIGGER_FIXED = 20\n\n# BOARD_REF: Board to which the CHANNEL_REF belongs\nBOARD_REF = 0\n# CHANNEL_REF: Channel used as a start in the TOF measurements\nCHANNEL_REF = 0\n\n##                    ##\n### Histogram options ##\n##                    ##\n\n# ENERGY_H_NBIN: Number of bins in the energy histogram\n# values: 1K, 2K, 4K, 8K, 16K\nENERGY_H_NBIN = 4K\n\n# TIME_H_NBIN: Number of bins in the time histogram\n# values: 256, 512, 1K, 2K, 4K, 8K, 16K\nTIME_H_NBIN = 1K\n\n# TIME_H_MODE: Time histogram mode\n# options: START_STOP (time from a common reference channel), INTERVALS (time between consecutive events)\nTIME_H_MODE = START_STOP\n\n# TIME_H_MIN: Lower time value used to make time histogram (in ns)\nTIME_H_MIN = -16\n# TIME_H_MAX: Upper time value used to make time histogram (in ns)\nTIME_H_MAX = 16\n\n\n# ----------------------------------------------------------------\n# Common Setting (applied to all channels as default value)\n# ----------------------------------------------------------------\n[COMMON]\n\n# INPUT_ENABLE: all channels can be enable/disable by default (can be individually enable/disable in [BOARD x - CHANNEL n] sections)\n# options: YES, NO\nINPUT_ENABLE = NO\n\n# SAMPLING_FREQUENCY\n# options: 0 = 3.2 GHz, 1 = 1.6 GHz, 2 = 800 MHz, 3 = 400 MHz\nSAMPLING_FREQUENCY = 3\n\n# INL_CORRECTION_ENABLE: enable the Integral Non Linearity correction for the acquired data\n# options: YES, NO\nINL_CORRECTION_ENABLE = YES\n\n# TRIGGER_TYPE\n# options: SOFTWARE (trigger  command  is generated  by  the  software),\n#          NORMAL (the signals will be recorded in the enabled channels upon the channel self trigger capability), \n#          EXTERNAL (trigger only on signals received from TRG-IN input),\n#          ADVANCED (allows separate settings, see EXTERNAL_TRIGGER, SOFTWARE_TRIGGER and CHANNEL_SELF_TRIGGER)\n#TRIGGER_TYPE = EXTERNAL\nTRIGGER_TYPE = NORMAL\n\n# EXTERNAL_TRIGGER: external trigger input settings.\n# SOFTWARE_TRIGGER: software trigger settings.\n# CHANNEL_SELF_TRIGGER: channel auto trigger settings.\n# When enabled, the specific trigger can be either propagated (ACQUISITION_AND_TRGOUT / TRGOUT_ONLY) or not (ACQUISITION_ONLY) through the TRGOUT\n# options: DISABLED, ACQUISITION_ONLY, ACQUISITION_AND_TRGOUT, TRGOUT_ONLY\n# These settings work if TRIGGER_TYPE is set on ADVANCED.\n#EXTERNAL_TRIGGER = ACQUISITION_ONLY\n#SOFTWARE_TRIGGER = ACQUISITION_ONLY\n#CHANNEL_SELF_TRIGGER = ACQUISITION_ONLY\n\n# CHANNEL_TRIGGER_ENABLE: channel auto trigger settings. (can be individually enable/disable in [BOARD x - CHANNEL n] sections)\n# options: YES, NO\nCHANNEL_TRIGGER_ENABLE = YES\n\n# RECORD_LENGTH = number of samples in the acquisition window\n# values: multiple of 16 (min = 16, max = 1024)\nRECORD_LENGTH = 1024\n\n# POST_TRIGGER: delay added to the trigger in the front-end FPGA before the acquisition is stopped. Units are in periods of the SAMLONG chips write clock (see V1743 userl Manual).\n# values: 1 to 255 \nPOST_TRIGGER = 20\n\n# TRIGGER_EDGE: decides whether the trigger occurs on the rising or falling edge of the signal\n# options: RISING, FALLING\nTRIGGER_EDGE = RISING\n\n# TRIGGER_THRESHOLD: threshold for the channel auto trigger\n# value: between -1.25 V and 1.25 V\nTRIGGER_THRESHOLD = 0.1\n\n# PULSE_POLARITY: input signal polarity\n# options: POSITIVE, NEGATIVE\nPULSE_POLARITY = POSITIVE\n\n# FPIO_LEVEL: type of the front panel I/O LEMO connectors \n# options: NIM, TTL\nFPIO_LEVEL =  NIM\n\n# DC_OFFSET: DC offset adjust (DAC channel setting)\n# value: between -1.25 V and 1.25 V\nDC_OFFSET = 0\n\n##                               ##\n### Waveforms processing options ##\n##                               ##\n\n# GATE_WIDTH: gate width (in ns)\nGATE_WIDTH = 150\n\n# PRE_GATE: portion of the gate before the trigger (in ns)\nPRE_GATE = 10\n\n# NS_BASELINE: Number of Samples for the input baseline calculation\nNS_BASELINE = 15\n\n# DISCR_MODE: Discriminator mode\n# options: LED, CFD\nDISCR_MODE = CFD\n\n# CFD_DELAY: CFD delay (in ns)\nCFD_DELAY = 40\n\n# CFD_ATTEN: CFD attenuation\n# value: between 0.0 and 1.0\nCFD_ATTEN = 0.2\n\n# TTF_SMOOTHING: smoothing\n# options: 0 = disabled, 1, 2, 3, 4 =&gt; 2, 4, 8, 16 samples\nTTF_SMOOTHING = 0\n\n##                 ##\n### Register write ##\n##                 ##\n\n# WRITE_REGISTER: generic write register access. This command allows the user to have a direct write access to the\n# registers of the board. NOTE: all the direct write accesses are executed before the other setting, thus it might\n# happen that one specific setting overwrites the register content.\n# Syntax: WRITE_REGISTER ADDRESS DATA, where ADDRESS is the address offset of the register (16 bit hex)\n# and DATA is the value being written (31 bit hex)\n# Example: WRITE_REGISTER  1080  00000010  # Set the threshold of channel 0 to 16 ADC counts (hex 10)\n#  WRITE_REGISTER  8168  8  \n#WRITE_REGISTER = 8100 FFFFFFFB 4\n\n\n# ----------------------------------------------------------------\n# Individual Settings \n# ----------------------------------------------------------------\n# The following setting are usually applied on channel by channel\n# basis; however, you can put them also in the [COMMON] section in\n# order to apply them to all channels.\n# [BOARD N]: options in this section are applies at all channel of the board N (it can overwrite the same option in [COMMON])\n# [BOARD N  - CHANNEL M]: option are applies at channel M of the board N (it can override the same option in [BOARD N])\n# ----------------------------------------------------------------\n\n# INPUT_ENABLE: enable/disable one channel\n# options: YES, NO\n\n# CHANNEL_TRIGGER_ENABLE: channel auto trigger settings.\n# options: YES, NO\n\n# DC_OFFSET: DC offset adjust\n# value: between -1.25 V and 1.25 V\n\n# TRIGGER_THRESHOLD: threshold for the channel auto trigger\n# value: between -1.25 V and 1.25 V\n\n# TRIGGER_EDGE: decides whether the trigger occurs on the rising or falling edge of the signal\n# options: RISING, FALLING\n\n# PULSE_POLARITY: input signal polarity\n# options: POSITIVE, NEGATIVE\n\n\n[BOARD 0]\nINPUT_ENABLE = NO\n\n[BOARD 0 - CHANNEL 0]\nINPUT_ENABLE = YES\nDC_OFFSET = 0\nTRIGGER_EDGE = RISING\nPULSE_POLARITY = POSITIVE\nTRIGGER_THRESHOLD = 0.1\n\n[BOARD 0 - CHANNEL 1]\nINPUT_ENABLE = NO\nDC_OFFSET = 0\nTRIGGER_EDGE = RISING\nPULSE_POLARITY = POSITIVE\nTRIGGER_THRESHOLD = +0.2\n[BOARD 0 - CHANNEL 2]\nINPUT_ENABLE = NO\n[BOARD 0 - CHANNEL 3]\nINPUT_ENABLE = NO\n\n\n[BOARD 1]\nINPUT_ENABLE = NO\n[BOARD 1 - CHANNEL 0]\nINPUT_ENABLE = NO\n</code></pre> <p>Tweak the config file, and run it. Good luck!</p> <p>This is a terminal utility, but shows spectra with Gnuplot. There are shortcut keys which you can check by pressing <code>?</code> .</p> <p>Some useful ones:</p> <ul> <li><code>h</code>: Enable histogram (Counts, Time) . Press again to make Counts, Channels.</li> <li><code>qy</code>: Quit, yes.</li> <li><code>ey</code>: Clear data, yes.</li> </ul>"}, {"location": "CAEN.html#success", "title": "Success", "text": "<p>I input the waveform from a shaping amplifier. 60Co -&gt; 2x2PMT -&gt; preamp -&gt; shaper -&gt; CAEN5743 , and got this plot.</p> <p></p>"}, {"location": "CAEN.html#graphical-interface-with-pyqt", "title": "Graphical interface with PyQt", "text": "<p>So i\u2019ve spun up a graphical interface for lazy folks. it does not use the library, but instead polls the files created by wavedemo. it also includes an editor to tweak the config file (saves automagically when you go back to the other tab)</p> <p></p> Source Code : graph.py <pre><code>import sys\nimport numpy as np\nfrom PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, \n                           QHBoxLayout, QLineEdit, QPushButton, QLabel, QFileDialog, QMenuBar, QMenu, QMessageBox, QToolBar, QTabWidget, QTextEdit)\nfrom PyQt5.QtCore import Qt, QProcess, QTimer\nfrom PyQt5.QtGui import QTextCursor, QIcon\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\nfrom matplotlib.figure import Figure\nimport pandas as pd\nimport os\nimport time\nfrom subprocess import Popen\n\nclass GraphingCalculator(QMainWindow):\n    monitoring_histogram = False\n    monitoring_waveform = False\n    \n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"CAEN Data Plotter\")\n        self.setGeometry(100, 100, 800, 600)\n\n        # Initialize timers\n        self.histo_timer = QTimer()\n        self.wave_timer = QTimer()\n        self.histo_timer.timeout.connect(self.update_histogram)\n        self.wave_timer.timeout.connect(self.update_waveform)\n        \n        # Initialize last modification times\n        self.last_histo_mtime = 0\n        self.last_wave_mtime = 0\n\n        # Create menu bar and toolbar\n        self.create_menu_bar()\n\n        # Create tab widget\n        self.tab_widget = QTabWidget()\n        self.setCentralWidget(self.tab_widget)\n\n        # Create and add plotting tab\n        self.plot_widget = QWidget()\n        self.setup_plot_tab()\n        self.tab_widget.addTab(self.plot_widget, \"Plotting\")\n\n        # Create and add config editor tab\n        self.config_widget = QWidget()\n        self.setup_config_tab()\n        self.tab_widget.addTab(self.config_widget, \"Config Editor\")\n\n        # Connect tab change signal\n        self.tab_widget.currentChanged.connect(self.on_tab_changed)\n        \n        # Store the last active tab\n        self.last_tab_index = 0\n\n    def setup_plot_tab(self):\n        \"\"\"Setup the plotting interface tab\"\"\"\n        main_layout = QVBoxLayout(self.plot_widget)\n\n        # Create input area\n        input_layout = QHBoxLayout()\n        csv_button = QPushButton(\"Plot CSV\")\n        wave_demo_button = QPushButton(\"Run WaveDemo\")\n        wave_demo_button.setIcon(QIcon.fromTheme(\"media-playback-start\"))\n        csv_button.clicked.connect(self.plot_csv)\n        wave_demo_button.clicked.connect(self.run_wave_demo)\n        input_layout.addWidget(csv_button)\n        input_layout.addWidget(wave_demo_button)\n        main_layout.addLayout(input_layout)\n\n        # Create matplotlib figure\n        self.figure = Figure(figsize=(8, 6))\n        self.canvas = FigureCanvas(self.figure)\n        main_layout.addWidget(self.canvas)\n\n        # Add control panel\n        self.control_panel = QWidget()\n        control_layout = QHBoxLayout(self.control_panel)\n        \n        # Add control buttons\n        self.monitor_hist_button = QPushButton(\"Monitor Histogram\")\n        self.monitor_wave_button = QPushButton(\"Monitor Waveform\")\n        self.stop_monitor_button = QPushButton(\"Stop Monitoring\")\n        self.monitor_hist_button.clicked.connect(self.monitor_histogram)\n        self.monitor_wave_button.clicked.connect(self.monitor_waveform)\n        self.stop_monitor_button.clicked.connect(self.stop_monitoring)\n        \n        control_layout.addWidget(self.monitor_hist_button)\n        control_layout.addWidget(self.monitor_wave_button)\n        control_layout.addWidget(self.stop_monitor_button)\n        \n        main_layout.addWidget(self.control_panel)\n        self.control_panel.hide()\n\n    def setup_config_tab(self):\n        \"\"\"Setup the config editor tab\"\"\"\n        config_layout = QVBoxLayout(self.config_widget)\n        \n        # Add text editor\n        self.config_editor = QTextEdit()\n        config_layout.addWidget(self.config_editor)\n        \n        # Load config file if it exists\n        self.load_config_file()\n\n    def load_config_file(self):\n        \"\"\"Load the WaveDemoConfig.ini file into the editor\"\"\"\n        try:\n            config_file = \"WaveDemoConfig.ini\"\n            if os.path.exists(config_file):\n                with open(config_file, 'r') as f:\n                    self.config_editor.setText(f.read())\n            else:\n                self.config_editor.setText(\"# WaveDemoConfig.ini not found\")\n        except Exception as e:\n            print(f\"Error loading config file: {str(e)}\")\n\n    def save_config_file(self):\n        \"\"\"Save the config file\"\"\"\n        try:\n            config_file = \"WaveDemoConfig.ini\"\n            with open(config_file, 'w') as f:\n                f.write(self.config_editor.toPlainText())\n            print(\"Config file saved successfully\")\n        except Exception as e:\n            print(f\"Error saving config file: {str(e)}\")\n\n    def on_tab_changed(self, index):\n        \"\"\"Handle tab changes\"\"\"\n        # If we're leaving the config editor tab, save the file\n        if self.last_tab_index == 1:  # Config editor tab index\n            self.save_config_file()\n        \n        # If we're entering the config editor tab, reload the file\n        if index == 1:\n            self.load_config_file()\n            \n        self.last_tab_index = index\n\n    def create_menu_bar(self):\n        \"\"\"Create the menu bar with File and Help menus\"\"\"\n        menubar = self.menuBar()\n        \n        # File menu\n        file_menu = menubar.addMenu('File')\n        \n        # Add Exit action to File menu\n        exit_action = file_menu.addAction('Exit')\n        exit_action.triggered.connect(self.close)\n        \n        # Help menu\n        help_menu = menubar.addMenu('Help')\n        \n        # Add About action to Help menu\n        about_action = help_menu.addAction('About')\n        about_action.triggered.connect(self.show_about_dialog)\n\n    def show_about_dialog(self):\n        \"\"\"Show the About dialog with software information\"\"\"\n        about_text = \"\"\"\n        &lt;h3&gt;CAEN Digitizer Data Plotter&lt;/h3&gt;\n        &lt;p&gt;This software is designed to visualize data from CAEN Multi Channel Analyzers \n        and Digitizers. It provides real-time monitoring of both waveforms and histograms \n        generated by the CAEN hardware.&lt;/p&gt;\n        \n        &lt;p&gt;&lt;b&gt;Features:&lt;/b&gt;&lt;/p&gt;\n        &lt;ul&gt;\n        &lt;li&gt;Real-time waveform monitoring&lt;/li&gt;\n        &lt;li&gt;Real-time histogram monitoring&lt;/li&gt;\n        &lt;li&gt;CSV data plotting capabilities&lt;/li&gt;\n        &lt;li&gt;Integration with CAEN WaveDemo software&lt;/li&gt;\n        &lt;/ul&gt;\n        \n        &lt;p&gt;&lt;b&gt;Developer:&lt;/b&gt;&lt;br&gt;\n        Jithin B.P.&lt;br&gt;\n        &lt;a href=\"mailto:jithinbp@gmail.com\"&gt;jithinbp@gmail.com&lt;/a&gt;&lt;/p&gt;\n        \n        &lt;p&gt;&lt;b&gt;Version:&lt;/b&gt; 1.0&lt;/p&gt;\n        \"\"\"\n        \n        QMessageBox.about(self, \"About CAEN Data Plotter\", about_text)\n\n    def plot_csv(self):\n        \"\"\"Open and plot a CSV file\"\"\"\n        try:\n            filename, _ = QFileDialog.getOpenFileName(self, \"Open CSV File\", \"\", \"CSV Files (*.csv);;Text Files (*.txt)\")\n            if filename:\n                data = self.read_data_file(filename)\n                if data is not None:\n                    self.plot_data(data, \"CSV Plot\", \"X\", \"Y\")\n        except Exception as e:\n            print(f\"Error plotting CSV: {str(e)}\")\n\n    def read_data_file(self, filename):\n        \"\"\"Read data from a file and return x, y data and labels\"\"\"\n        try:\n            df = pd.read_csv(filename, delimiter='\\s+', header=None)\n            \n            if len(df.columns) &gt;= 2:\n                # Multi-column case: use first two columns\n                x_data = df.iloc[:, 0]\n                y_data = df.iloc[:, 1]\n            else:\n                # Single-column case: generate x values automatically\n                y_data = df.iloc[:, 0]\n                x_data = np.arange(len(y_data))\n            \n            return {'x': x_data, 'y': y_data}\n        except Exception as e:\n            print(f\"Error reading file {filename}: {str(e)}\")\n            return None\n\n    def plot_data(self, data, title, xlabel, ylabel, plot_type='line'):\n        \"\"\"Generic plotting function for both line plots and histograms\"\"\"\n        try:\n            self.figure.clear()\n            self.ax = self.figure.add_subplot(111)\n            \n            if plot_type == 'line':\n                self.ax.plot(data['x'], data['y'])\n            elif plot_type == 'histogram':\n                self.ax.bar(np.arange(len(data['y'])), data['y'], width=1)\n            \n            self.ax.set_title(title)\n            self.ax.set_xlabel(xlabel)\n            self.ax.set_ylabel(ylabel)\n            self.ax.grid(True)\n            self.canvas.draw()\n        except Exception as e:\n            print(f\"Error plotting data: {str(e)}\")\n\n    def run_wave_demo(self):\n        \"\"\"Run the WaveDemo command in a new gnome-terminal\"\"\"\n        try:\n            # Launch terminal with a unique title\n            terminal_title = \"wavedemo_terminal\"\n            cmd = f'gnome-terminal --title=\"{terminal_title}\" -- bash -c \"WaveDemo_x743 WaveDemoConfig.ini; read -p \\'Press Enter to close...\\'\"'\n            QProcess.startDetached('gnome-terminal', ['--title', terminal_title, '--', 'bash', '-c', 'WaveDemo_x743 WaveDemoConfig.ini; read -p \"Press Enter to close...\"'])\n            \n            # Give terminal time to open\n            time.sleep(1)\n            \n            # Show the control panel after launching WaveDemo\n            self.control_panel.show()\n        except Exception as e:\n            print(f\"Error launching terminal: {str(e)}\")\n\n    def monitor_histogram(self):\n        \"\"\"Start histogram monitoring\"\"\"\n        # Stop waveform monitoring if active\n        if self.monitoring_waveform:\n            self.wave_timer.stop()\n            self.monitoring_waveform = False\n            \n        # Start histogram monitoring\n        self.monitoring_histogram = True\n        self.histo_timer.start(100)  # Poll every 100ms\n        \n        # Initialize the plot\n        self.figure.clear()\n        self.ax = self.figure.add_subplot(111)\n        self.ax.set_title(\"Histogram Monitor\")\n        self.ax.grid(True)\n        self.canvas.draw()\n\n    def monitor_waveform(self):\n        \"\"\"Start waveform monitoring\"\"\"\n        # Stop histogram monitoring if active\n        if self.monitoring_histogram:\n            self.histo_timer.stop()\n            self.monitoring_histogram = False\n            \n        # Start waveform monitoring\n        self.monitoring_waveform = True\n        self.wave_timer.start(100)  # Poll every 100ms\n        \n        # Initialize the plot\n        self.figure.clear()\n        self.ax = self.figure.add_subplot(111)\n        self.ax.set_title(\"Waveform Monitor\")\n        self.ax.grid(True)\n        self.canvas.draw()\n\n    def stop_monitoring(self):\n        \"\"\"Stop all monitoring\"\"\"\n        self.monitoring_histogram = False\n        self.monitoring_waveform = False\n        self.histo_timer.stop()\n        self.wave_timer.stop()\n\n    def update_histogram(self):\n        \"\"\"Update histogram plot from file\"\"\"\n        try:\n            filename = \"PlotHistoData.txt\"\n            if not os.path.exists(filename):\n                return\n\n            # Check if file has been modified\n            mtime = os.path.getmtime(filename)\n            if mtime &lt;= self.last_histo_mtime:\n                return\n            self.last_histo_mtime = mtime\n\n            data = self.read_data_file(filename)\n            if data is not None:\n                self.plot_data(data, \"Histogram Monitor\", \"Value\", \"Counts\", plot_type='histogram')\n\n        except Exception as e:\n            print(f\"Error updating histogram: {str(e)}\")\n\n    def update_waveform(self):\n        \"\"\"Update waveform plot from file\"\"\"\n        try:\n            filename = \"PlotWavesData.txt\"\n            if not os.path.exists(filename):\n                return\n\n            # Check if file has been modified\n            mtime = os.path.getmtime(filename)\n            if mtime &lt;= self.last_wave_mtime:\n                return\n            self.last_wave_mtime = mtime\n\n            data = self.read_data_file(filename)\n            if data is not None:\n                self.plot_data(data, \"Waveform Monitor\", \"Time\", \"Amplitude\", plot_type='line')\n\n        except Exception as e:\n            print(f\"Error updating waveform: {str(e)}\")\n\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    calculator = GraphingCalculator()\n    calculator.show()\n    sys.exit(app.exec_())\n</code></pre> <p>Dependencies : PyQt5 , matplotlib, numpy    </p>"}, {"location": "GSOCREADME.html", "title": "GSOC 2017", "text": "<p>This page is for my GSoC-2017 work</p> <p>For GSoC-17, I contributed much of my work from 2014 onwards on the ExpEYES project to the PSLab project. Given that the contributions were hijacked, and neither I not any of the original developers no longer receive any credit, this only serves as an archive. I now contribute directly to the ExpEYES project by :</p> <ul> <li>maintaining the Desktop apps</li> <li>writing the android app which is currently more mature than the desktop UI</li> <li>Maintaining a programmer\u2019s manual</li> <li>Updating the firmware</li> </ul>"}, {"location": "GSOCREADME.html#gsoc-contributions", "title": "GSOC contributions", "text": ""}, {"location": "GSOCREADME.html#firmware-httpsgithubcomfossasiapslab-firmware", "title": "Firmware : https://github.com/fossasia/pslab-firmware", "text": "<p>Code for PIC24E processor written with MPLab IDE and compiled with XC16 compiler. This was from my SEELablet project documented on Hackaday as Python Powered Scientific Instrumentation tool and on github as Labtoolsuite</p> <ul> <li>Hardware https://github.com/fossasia/pslab-hardware : Made with KiCAD by Dr Ajith Kumar for Vlabtool, a more mature version of the previous one.</li> <li>Desktop application: https://github.com/fossasia/pslab-desktop-apps : A clone of SEELablet which was already available on the official Debian repository.</li> <li>Python Communication Library : Was also a part of the previous one.</li> <li>remote laboratory : https://github.com/fossasia/pslab-remote : Made a framework for accessing the device remotely. This involves a backend designed with python flask, and a webapp made with ember-cli. A demo of the webapp hosted on  surge, and the backend is hosted on Heroku.</li> </ul> <p>A list of blog posts I wrote elaborating my journey (The most useless part of this GSOC where all they wanted was publicity for their organisation) :</p> <ul> <li>Who Needs it, and Why http://blog.fossasia.org/the-pocket-science-lab-who-needs-it-and-why-2/</li> <li>Diode IV http://blog.fossasia.org/understanding-pn-junctions-with-the-pocket-science-lab/</li> <li>Calibration http://blog.fossasia.org/calibrating-the-pslabs-analog-features-for-maximum-accuracy/</li> <li>Transistor CE http://blog.fossasia.org/characteristization-of-transistors-using-pslab/</li> <li>Remote lab framework http://blog.fossasia.org/designing-a-virtual-laboratory-with-pslab/</li> <li>Creating backend API methods with  Python Flask http://blog.fossasia.org/designing-a-remote-laboratory-with-pslab-using-python-flask-framework/</li> <li>Execute python function calls remotely http://blog.fossasia.org/designing-a-remote-laboratory-with-pslab-execution-of-function-strings/</li> <li>Deploying the API server and Webapp to separate domains automaticaly http://blog.fossasia.org/pslab-remote-lab-automatically-deploying-the-emberjs-webapp-and-flask-api-server-to-different-domains/</li> </ul> <ul> <li>The PSLab project is derived from ExpEYES  http://expeyes.in</li> <li>FOSSASIA is riding off the back of ExpEYES project through Google Summer of Code</li> </ul>"}, {"location": "GSoC2017.html", "title": "Project Abstract : Develop firmware and experiments", "text": "<p>Characteristic of a shift into the digital era, students have started to learn to code at an early age.  However, most of the academic applications are currently centered around purely software based learning techniques such as simulations. The ability to easily access multiple control and measurement tools as well as analyze the results from one common platform  (such as is common in advanced research labs ) enables students to design new experiments and further the spirit of science.</p> <p>ExpEYES17 is such a platform precisely, and its architecture makes it an affordable tool for the masses, that has the potential to nurture young scientists.</p> <p>Over this summer, I contributed to such a device based on my work from2014 onwards as documented on Hackaday, and published on the Debian repo. I worked with several frameworks such as EmberJS, Flask, Jekyll, and PyQt, and also got acquainted with platforms such as Heroku and Surge.sh . During the course of this programme, I wrote 15 blog posts outlining my work, and the organisation was mostly focused on getting publicity and counting commits rather than getting work done.</p>"}, {"location": "GSoC2017.html#mentors-lorenz-gerber-kiwi-praveen-patil-gnovi-greg-austic-ansgar-schmidt-darwin-gosal-wan-leung-wong-ajithkumar-bp-mitch-altman", "title": "Mentors : Lorenz Gerber, Kiwi, Praveen Patil (Gnovi), Greg Austic, Ansgar Schmidt, Darwin Gosal, Wan Leung Wong, Ajithkumar bp, Mitch Altman, \u2026", "text": ""}, {"location": "GSoC2017.html#progress-report", "title": "Progress report", "text": ""}, {"location": "GSoC2017.html#for-gsoc-17-i-worked-on-several-aspects-of-this-project", "title": "For GSoC-17, I worked on several aspects of this Project:", "text": ""}, {"location": "GSoC2017.html#desktop-applications", "title": "* Desktop Applications:", "text": "<p>The desktop applications consist of a range of PyQt based graphical utilities and apps that allow users to carry out a range of experiments. They rely on PyQtGraph for visualization of data, and Scipy and Numpy for data analysis. The package uses pslab-python repository for communicating with the hardware.   * Desktop application: https://github.com/fossasia/pslab-desktop-apps : A clone of SEELablet which was already available on the official Debian repository.   * Documenting several apps using Jekyll to render markdown files via templates. Docs for a few apps are still pending.   * Cross checked a range of experiments and collected data.   * Created screenshots, and made several schematics for documentation.   * Added applications to calibrate the pslab using ADS1115 16-bit ADC module.  </p> <ul> <li> Screenshot of an experiment : Pendulum study using IMU sensors </li> <li> Screenshot of a Docs Page made with Jekyll </li> <li> Sample help Page: Interference of sound experiment  </li> </ul> <ul> <li>My Contribution: Pull Requests, commits, issues</li> </ul>"}, {"location": "GSoC2017.html#remote-laboratory-httpsgithubcomfossasiapslab-remote", "title": "* Remote Laboratory : https://github.com/fossasia/pslab-remote:", "text": "<p>The remote laboratory is essentially an EmberJS webapp paired with a Python-Flask API server that allows users to write and execute python scripts via the internet or local network. In the progress I have made so far, users can create accounts, and write a variety of Python scripts whose console output will be shown on the webapp. A framework for object oriented scripts is under development, and users are currently able to create button widgets, and relay the results of their callbacks to graphs as well as labels.   * I Created an API server with python flask, and Postgresql. A live copy is hosted on heroku . A real device is not connected to the server, and a dummy class is being used instead.   * Created a webapp made with EmberJS . A demo of the webapp hosted on Surge.sh.     * Sign-up is not necessary; a demo account may be used; username: a@a.com , password:a      * Heroku reaps free dynos after an hour of inactivity, so the backend may take up to 10 seconds to boot up and respond to the first request.</p> <ul> <li>My Contribution: Pull Requests, issues, commits</li> </ul>"}, {"location": "GSoC2017.html#python-communication-library", "title": "* Python Communication Library", "text": "<p>This is a communication library written in Python that contains all the methods used to interact with the pocket science lab.   * Was also a part of my previous work on vLabtool, and is documented on hackaday.   * Made bug fixes in capture calls.   * Assisted the android team to understand the various function calls during the porting process   * My Contribution: Pull Requests, commits, issues</p>"}, {"location": "GSoC2017.html#firmware-development-httpsgithubcomfossasiapslab-firmware", "title": "* Firmware Development : https://github.com/fossasia/pslab-firmware", "text": "<p>The firmware is essentially a large state machine that squeezes out almost all capabilities of the central microcontroller of the device, a PIC24E series chip from Microchip Technology.   * This is a codedump of the vLabtool firmware. refer first commit.   * uploaded the same during the proposal stage of GSoC-17. Should have insisted on a fork from my git page.   * My Contribution: Pull Requests, commits, issues</p>"}, {"location": "GSoC2017.html#hardware-design", "title": "* Hardware Design :", "text": "<p>The PSLab hardware is a 4 layer circuit board designed with KiCAD by Dr Ajith Kumar . The hardware has a minimal bill of materials, and combines a powerful 64MHz microcontroller with a range of analog peripherals such as programmable amplifiers, Op-Amps, buffers, crystals etc.   * Designed with KiCAD.   * I also manufactured the device and supplied it to co-developers for development and testing.  <ul> <li> Flow diagram of device </li> </ul> </p> <ul> <li>My Contribution: Pull Requests, commits, issues</li> </ul> <ul> <li>The PSLab project is derived from ExpEYES  http://expeyes.in</li> </ul>"}, {"location": "about.html", "title": "About", "text": ""}, {"location": "about.html#contact-me", "title": "Contact me", "text": "<p>jithinbp@gmail.com</p>"}, {"location": "boards.html", "title": "Other Microcontrollers", "text": "<p>The kuttypy bootloader command set can be extended to support other boards as well, without losing capabilities. Thus far, two boards other than the original KuttyPy based on Atmega32 have been tested.</p> <ul> <li>Arduino Uno R3</li> <li>Arduino Nano</li> </ul>"}, {"location": "boards.html#arduino-uno-r3", "title": "Arduino Uno R3", "text": "<p>Demo Video showing an MPU6050 connected to the Uno, and KuttyPy software displaying values</p> <p>      Sorry, your browser doesn\u2019t support embedded videos. </p> <p>Basic I/O controls and I2C sensors have been implemented. Work needs to be done to properly support PWM, ADCs etc.</p>"}, {"location": "boards.html#arduino-nano", "title": "Arduino Nano", "text": "<p>Basic I/O controls and I2C sensors have been implemented. Work needs to be done to properly support PWM, ADCs etc.</p>"}, {"location": "catprinter.html", "title": "Catprinter", "text": ""}, {"location": "catprinter.html#reverse-engineering-thermal-printer", "title": "Reverse engineering thermal printer", "text": "<p>So i bought this cute cat thermal printer for 1000 Rs, hoping to reverse engineer it and and run it from a python script over bluetooth.</p> <p>while waiting for it to deliver, I found several other reverse engineering efforts, and it seemed like I had my job cut out for me..  however, none of the 4 blogs i followed worked for the model I got. The tutorial on apk decompilation by Werwolv was quite detailed so I set out to decompile the app that works with my printer. perhaps i can get it working with some minorcommand tweaks.</p>"}, {"location": "catprinter.html#downloaded-the-apk", "title": "Downloaded the apk", "text": "<p>Press the power button twice, and it gives you a scan code to download a 180 MB apk. but the same app  can be found on the play store as <code>fun print</code> , and the same developer <code>yintibao</code> has another app called iBleem which also works with this printer.</p>"}, {"location": "catprinter.html#decompilation", "title": "Decompilation", "text": "<p>http://www.javadecompilers.com/apk</p> <p>uploaded the massive 180MB apk, and received a 207MB zip file within a minute. takes up 450 MB when unzipped.  This app could be a few MB if you didn\u2019t need so many bells and whistles.</p>"}, {"location": "catprinter.html#bluetoothctl", "title": "bluetoothctl", "text": "<pre><code>[MXW01:/service0008/char0016]# gatt.\ngatt.acquire-notify             gatt.register-service\ngatt.acquire-write              gatt.release-notify\ngatt.attribute-info             gatt.release-write\ngatt.clone                      gatt.select-attribute\ngatt.list-attributes            gatt.unregister-application\ngatt.notify                     gatt.unregister-characteristic\ngatt.read                       gatt.unregister-descriptor\ngatt.register-application       gatt.unregister-includes\ngatt.register-characteristic    gatt.unregister-service\ngatt.register-descriptor        gatt.write\ngatt.register-includes          \n[MXW01:/service0008/char0016]# gatt.list-attributes \nPrimary Service (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0040\n\t0000ae3a-0000-1000-8000-00805f9b34fb\n\tUnknown\nCharacteristic (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0040/char0043\n\t0000ae3c-0000-1000-8000-00805f9b34fb\n\tUnknown\nDescriptor (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0040/char0043/desc0045\n\t00002902-0000-1000-8000-00805f9b34fb\n\tClient Characteristic Configuration\nCharacteristic (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0040/char0041\n\t0000ae3b-0000-1000-8000-00805f9b34fb\n\tUnknown\nPrimary Service (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0008\n\t0000ae30-0000-1000-8000-00805f9b34fb\n\tUnknown\nCharacteristic (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0008/char0016\n\t0000ae10-0000-1000-8000-00805f9b34fb\n\tUnknown\nCharacteristic (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0008/char0013\n\t0000ae05-0000-1000-8000-00805f9b34fb\n\tUnknown\nDescriptor (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0008/char0013/desc0015\n\t00002902-0000-1000-8000-00805f9b34fb\n\tClient Characteristic Configuration\nCharacteristic (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0008/char0010\n\t0000ae04-0000-1000-8000-00805f9b34fb\n\tUnknown\nDescriptor (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0008/char0010/desc0012\n\t00002902-0000-1000-8000-00805f9b34fb\n\tClient Characteristic Configuration\nCharacteristic (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0008/char000e\n\t0000ae03-0000-1000-8000-00805f9b34fb\n\tUnknown\nCharacteristic (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0008/char000b\n\t0000ae02-0000-1000-8000-00805f9b34fb\n\tUnknown\nDescriptor (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0008/char000b/desc000d\n\t00002902-0000-1000-8000-00805f9b34fb\n\tClient Characteristic Configuration\nCharacteristic (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0008/char0009\n\t0000ae01-0000-1000-8000-00805f9b34fb\n\tUnknown\nPrimary Service (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0004\n\t00001801-0000-1000-8000-00805f9b34fb\n\tGeneric Attribute Profile\nCharacteristic (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0004/char0005\n\t00002a05-0000-1000-8000-00805f9b34fb\n\tService Changed\nDescriptor (Handle 0x0000)\n\t/org/bluez/hci0/dev_48_0F_57_11_2D_EE/service0004/char0005/desc0007\n\t00002902-0000-1000-8000-00805f9b34fb\n\tClient Characteristic Configuration\n[MXW01:/service0008/char0016]# \n</code></pre>"}, {"location": "catprinter.html#trying-bluetooth-hci-snoop-log", "title": "Trying Bluetooth HCI snoop log", "text": "<p>enabled it from developer options</p> <p>adb bugreport anewbugreportfolder</p>"}, {"location": "catprinter.html#receive", "title": "Receive", "text": "<p>on characteristic 0xAE02 , received following on eDebugger android app when lid opened/closed</p> <p>------------------------------------o/c----------- 22 21 A1 03 0A 00 00 00 00 49 1B 00 01 01 2F 07 00 22 21 A1 03 0A 00 00 00 00 49 1B 00 00 00 42 07 00</p> <p>got this with simplepyble library when the lid wasopened. 22 21 a1 03 0a 00 00 00 00 49 1c 00 01 01 2d 0b 00</p> <p>no dice so far\u2026</p>"}, {"location": "catprinter.html#_1", "title": "Catprinter", "text": "<pre><code>public void openNotification() {\n    BleManager.getInstance().notify(\n        this.connectingDevice,\n        this.charactristicNotiy.getService().getUuid().toString(), \n        this.charactristicNotiy.getUuid().toString(),\n        new BleNotifyCallback() {\n            public void onCharacteristicChanged(byte[] data) {\n                // This is where AE02 notifications are received\n                if (data.length != 0) {\n                    // Process incoming data\n                    String firstByte = byteToHex(data[0]);\n                    if (\"01\".equals(firstByte)) {\n                        // Handle flow control response\n                        new Thread() {\n                            public void run() {\n                                synchronized (flowLock) {\n                                    FlowWriteForV10G.setGredit(\n                                        Integer.parseInt(byteToHex(data[1]), 16)\n                                    );\n                                    FlowWriteForV10G.setCanWriteFlag(true);\n                                    flowLock.notify();\n                                }\n                            }\n                        }.start();\n                    }\n                }\n            }\n            // ... other callback methods\n        }\n    );\n}\n</code></pre> <p>The notification handler is set up when the device is connected and services are discovered. The code listens for incoming data on the notification characteristic (AE02) and processes it, particularly for flow control responses where:</p> <ul> <li>It checks the first byte of the response</li> <li>If the first byte is \u201c01\u201d, it handles flow control by:</li> <li>Setting the credit value from the second byte</li> <li>Enabling the write flag</li> <li>Notifying the flow control lock</li> </ul> <p>This is part of the flow control mechanism where the printer uses AE02 to tell the app when it\u2019s ready to receive more data via AE01.</p>"}, {"location": "mqtt.html", "title": "Mosquitto ESP Node-red environment monitor", "text": "<p>Ubuntu MQTT project for IoT</p>"}, {"location": "mqtt.html#test-server", "title": "test server", "text": "<p>Subscribe</p> <p>mosquitto_sub -v -t \u2018test/topic\u2019</p> <p>Publish</p> <p>mosquitto_pub -t \u2018test/topic\u2019 -m \u2018helloWorld\u2019</p> <p>The above will cause the subscribe command to output <code>helloWorld</code>. tested over localhost.</p>"}, {"location": "mqtt.html#installing-node-red-111-mb", "title": "Installing node red (111 MB)", "text": "<ul> <li><code>sudo docker run -it -p 1880:1880 -v /home/pi/.node-red:/data --name mynodered nodered/node-red</code></li> </ul> Data directory permissions <p>Users migrating from version 0.20 to 1.0 will need to ensure that any existing /data directory has the correct ownership. As of 1.0 this needs to be 1000:1000. This can be forced by the command  sudo chown -R 1000:1000 path/to/your/node-red/data</p> <pre><code>## RUn commands inside this docker container\n\n`docker exec -it mynodered /bin/bash`\n\n\n---------------------------------------------------------------------\n\n5 Nov 04:48:24 - [info] Server now running at http://127.0.0.1:1880/\n5 Nov 04:48:24 - [warn] Encrypted credentials not found\n5 Nov 04:48:24 - [info] Starting flows\n5 Nov 04:48:24 - [info] Started flows\n</code></pre> <ul> <li> <p>The docker installation also launches node-red, but you can <code>ctrl-c</code> and restart it with <code>node-red</code></p> </li> <li> <p>Navigate to http://127.0.0.1:1880/</p> </li> </ul> <p></p>"}, {"location": "mqtt.html#access-authentication", "title": "Access authentication", "text": "<p>password hashes are stored. you can create the hash using the command <code>node-red admin hash-pw</code> . node-red exists inside docker, so first use <code>docker exec -it mynodered /bin/bash</code></p> <p>open ~/.node-red/settings.js</p> <p>admin password</p> <pre><code>/** To password protect the Node-RED editor and admin API, the following\n* property can be used. See https://nodered.org/docs/security.html for details.\n*/\nadminAuth: {\ntype: \"credentials\",\nusers: [{\n    username: \"adminusername\",\n    password: \"$2y$08BC34*ATUO5Fadminpasswordhash6zybFRVCA1jAAAAUcy\",\n    permissions: \"*\"\n}]\n},\n</code></pre> <p>ui access password</p> <pre><code>httpNodeAuth: {user:\"username\",pass:\"$2y$08$mQF0kmw----thisisabcrypthash----sis2mXmElZyHdaw0XuOXTuT9bcDVju\"},\n</code></pre>"}, {"location": "mqtt.html#node-red-dashboard", "title": "node-red-dashboard", "text": "<p>Manage Pallette( Alt-p)</p> <ul> <li>node-red-dashboard 3.6.5</li> </ul>"}, {"location": "mqtt.html#create-the-layout-node-red-dashboard", "title": "Create the layout : node red dashboard", "text": "<p>From the right side menu, select <code>Dashboard</code> , and click on the Layouts tab. Here you can add tabs, and groups under each tab. Groups are essential, and each ui widget must be assigned a group inside which it will be shown.</p> <ul> <li>Layout</li> </ul> <p></p> <ul> <li>Sample workflow</li> </ul> <p></p> <ul> <li>My dashboard with Humidity controller</li> </ul> <p></p>"}, {"location": "mqtt.html#trouble-with-accessing-mqtt-via-different-ip", "title": "Trouble with accessing MQTT via different IP", "text": "<p>set the listener to use <code>0.0.0.0</code></p> /etc/mosquitto/mosquitto.conf <pre><code># Place your local configuration in /etc/mosquitto/conf.d/\n#\n# A full description of the configuration file is at\n# /usr/share/doc/mosquitto/examples/mosquitto.conf.example\n\npersistence true\npersistence_location /var/lib/mosquitto/\n\nlog_dest file /var/log/mosquitto/mosquitto.log\n\ninclude_dir /etc/mosquitto/conf.d\n\nallow_anonymous true\nlistener 1883 0.0.0.0\n</code></pre>"}, {"location": "mqtt.html#migrating-to-dashboard-2-by-flowfuse", "title": "Migrating to dashboard-2 by Flowfuse", "text": "<p>I needed a grid in landscape mode, and not just portrait. Miss the angular style widgets, but will make do.</p> <p></p> <p></p>"}, {"location": "mqtt.html#returning-to-dashboard-1", "title": "Returning to dashboard 1", "text": "<p>I stand corrected. The original dashboard is also responsive, and with the use of multiple groups, looks quite nice. There is also a layout edit option when you hover the mouse over any tab in the Tabs and Links section.</p> <p></p> <p></p> <p>The flowfuse graph wasn\u2019t as pretty, which is why I tried reverting. Anyway, I have 2 flow pages, and both dashboards are currently active.</p>"}, {"location": "mqtt.html#embed-map", "title": "embed map", "text": "<p>Tried a library to embed maps, but it doesn\u2019t offer widgets, and instead makes a new page under /worldmap. </p>"}, {"location": "mqtt.html#mosquitto-log", "title": "Mosquitto log", "text": "View the mosquitto log file | connect/disconnect events <p>sudo tail -f /var/log/mosquitto/mosquitto.log  <pre><code>1730874020: Client BME_ROOM2 already connected, closing old connection.\n1730874020: New client connected from 192.168.23.249:55356 as BME_ROOM2 (p2, c1, k30).\n1730874023: New connection from 192.168.23.124:60488 on port 1883.\n1730874023: Client BME_ROOM1 already connected, closing old connection.\n1730874023: New client connected from 192.168.23.124:60488 as BME_ROOM1 (p2, c1, k30).\n</code></pre> helped troubleshoot an instance where i had 2 sensors with the same client name. So when one sends data, the other gets disconnected. Like this:</p> <pre><code>1730872526: Client BME_ROOM already connected, closing old connection.\n1730872526: New client connected from 192.168.23.124:50519 as BME_ROOM (p2, c1, k30).\n1730872542: New connection from 192.168.23.249:49503 on port 1883.\n1730872542: Client BME_ROOM already connected, closing old connection.\n1730872542: New client connected from 192.168.23.249:49503 as BME_ROOM (p2, c1, k30).\n1730872557: New connection from 192.168.23.124:50520 on port 1883.\n1730872557: Client BME_ROOM already connected, closing old connection.\n1730872557: New client connected from 192.168.23.124:50520 as BME_ROOM (p2, c1, k30).\n1730872572: New connection from 192.168.23.249:49504 on port 1883.\n1730872572: Client BME_ROOM already connected, closing old connection.\n1730872572: New client connected from 192.168.23.249:49504 as BME_ROOM (p2, c1, k30).\n1730872587: New connection from 192.168.23.124:50521 on port 1883.\n1730872587: Client BME_ROOM already connected, closing old connection.\n1730872587: New client connected from 192.168.23.124:50521 as BME_ROOM (p2, c1, k30).\n1730872602: New connection from 192.168.23.249:49505 on port 1883.\n</code></pre>"}, {"location": "mqtt.html#enabling-clients-via-javascript", "title": "Enabling clients via Javascript", "text": "<p>I wanted to use this with embedded webviews running on android, but those do not support mqtt, but need  to use the websockets protocol. mosquitto 1.6 needed to be upgraded to 2.0 </p> <pre><code>sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa  \nsudo apt update\nsudo apt install mosquitto\n</code></pre> <p>The new mosquitto.conf file which adds port 9001 for websocket connections</p> <pre><code>persistence true\npersistence_location /var/lib/mosquitto/\n\nlog_dest file /var/log/mosquitto/mosquitto.log\n\ninclude_dir /etc/mosquitto/conf.d\n\nallow_anonymous true\nlistener 1883 0.0.0.0\n\nlistener 9001 0.0.0.0\nprotocol websockets\nsocket_domain ipv4\n</code></pre>"}, {"location": "quiz_server.html", "title": "Creating a quiz server for SEELab3", "text": "<p>Objective: I need a way for teachers to conduct real time quizzes in the classroom where they use the desktop app to send MCQ questions which are relayed via the server to the android apps of the students.</p> <p>Tools: fastapi, redis, gunicorn, socketio</p>"}, {"location": "quiz_server.html#the-server", "title": "The server", "text": "<p>Built with fastapi and redis for scalability, it hosts socketio, and allows folks to create quiz rooms with passwords. students can then join these rooms.</p> <p>testing : python3 socket_server.py deploy: gunicorn -w 4 -k uvicorn.workers.UvicornWorker socket_server:app</p>"}, {"location": "quiz_server.html#clients", "title": "Clients", "text": ""}, {"location": "quiz_server.html#teacher", "title": "Teacher", "text": "<p>a testing script connects and creates a room. when the server says room has been created, it starts sending questions to that room\u2019s members</p>"}, {"location": "quiz_server.html#student", "title": "Student", "text": "<p>A testing script connects and listens for questions a shell script is used to spin up multiple students</p> <p><code>for i in {1..20}; do python3 test_student.py &amp; done</code></p> <p>for killing all</p> <p><code>kill $(jobs -p)</code></p>"}, {"location": "quiz_server.html#screenshots", "title": "Screenshots", "text": "<p>Deploying </p> <p>Running </p>"}, {"location": "workshopnano.html", "title": "Kuttypy Nano", "text": "<p><code>Tutorial for learning to use KuttyPyNano - A Python to real world bridge</code></p> <p>Intended audience</p> <ul> <li>Beginners who would like to explore microcontroller functions via Python without the compile+upload hassle.</li> <li>Hobbyists who want a way to control external parameters such as lights, fans, and robots from their Python programs</li> <li>Scientists who want to use affordable and easily available sensors for physical parameters( temperature, humidity, pressure\u2026) without having to learn embedded systems and communications.</li> </ul> <p></p>"}, {"location": "workshopnano.html#software-installation", "title": "Software Installation", "text": "<p>Download the kuttypy app from the google playstore.</p>"}, {"location": "workshopnano.html#hello-world", "title": "Hello World", "text": "<p>This workshop will introduce you to the following basics of how to use a microcontroller to automate everyday tasks. They will use the android app to change values of bits (0s and 1s) in various registers  via a friendly graphical interface, and enable you to observe the corresponding behaviour of the hardware in real-time. No Compiling/Uploading of code is planned, and all input/output tasks are via the phone.</p>"}, {"location": "workshopnano.html#explore-the-playground", "title": "Explore the playground", "text": "<p>Once you connect a KuttyPy nano to your phone via USB OTG cable, the titlebar should turn green in colour and show the KuttyPy nano\u2019s picture below it. If not, close the app and try again.</p> <p>Click the playground.</p> <p>Here you will find a picture showing the pin numbers, and also the associated register+bit notation of that pin. </p> <p>For example, D13 is labelled as PB3. This means that the output pin of the microcontroller which is  connected to D13 is controlled by the 3<sup>rd</sup> bit of the B register.</p> <p>PB5 is also connected to the Fourth LED (Red) of the board, so turning it on will light up this LED.</p> <p></p> <p></p>"}, {"location": "workshopnano.html#connect-more-leds", "title": "Connect MORE LEDS", "text": "<p>Similarly, you can also connect LEDs to other pins such as  D2 (PD2), D3, D4\u2026 D12. </p> <p>Let us try to use D8 (PB0) . Connect a 1Kohm (1000 ohms) resistor from D8 pin to the longer leg(+) of an LED. You can use a breadboard to make these connections as shown. Then the shorter leg of the LED(-) should be connected to GND to complete the circuit.</p> <p></p> <p>Now tap on PB0 in the playground, and change the output level from L to H to light up this LED.</p> <p>When the pin is shown as IN type in the playground, the L/H icon indicates the state of the pin in input mode. If voltage on the pin is near 0 Volts, it is L, and if it is above 3 Volts, it is H.</p>"}, {"location": "workshopnano.html#what-are-registers-and-how-to-blink-an-led", "title": "What are registers, and how to blink an LED", "text": "<p>We shall now learn to write programs.</p>"}, {"location": "workshopnano.html#getting-started", "title": "Getting Started", "text": "<ul> <li><code>Go to Visual Programming -&gt; Getting Started -&gt; Hello World</code></li> </ul> <p>The program shown has 2 parts. </p> <ul> <li>A print block : This prints(displays on the screen) the value of anything connected to it.</li> <li>A label whose value is set to <code>hello</code></li> </ul> <p>You will find a blue button called \u2018RUN\u2019 at the top left corner. This is used to run your simple program. Click it .</p> <p>Click it again to close the results window, and edit your program.</p> <p>There are also buttons to temporarily save and restore your work, and also a <code>help</code> button for instructions.</p> <p>On the left are various components you can use to design your program</p>"}, {"location": "workshopnano.html#blink-an-led", "title": "Blink an LED", "text": "<p>The LED you connected to PB0 (D8) will again be used . + <code>Go to Visual Programming -&gt; KuttyNano -&gt; Blink LED</code></p> <p></p> <p>Observe this program carefully</p> <ul> <li>the 0<sup>th</sup> bit(Right-Most) of DDRB(Data Direction Register for B) is selected (Set to 1).</li> <li>This means that PB0 is is now configured as an output. you can connect LEDs and other small loads to it.</li> <li>A <code>while</code> loop with the condition set to <code>true</code> is added below it</li> <li>Anything inside a while loop will run in a loop continuously as long as the condition is <code>true</code>.</li> <li>The 0<sup>th</sup> bit of PORTB( Used to set the voltage level of output pins) register is selected.</li> <li>Now the LED should be on, so we wait for 2 seconds so you can see it is ON.</li> <li>Then the 0<sup>th</sup> bit is made 0, so PB0 will be set to 0Volts.</li> <li>So the LED will be off, and we now wait another 2 seconds.</li> <li>The cycle of On OFF will keep repeating forever until you abort the program.</li> </ul>"}, {"location": "workshopnano.html#traffic-lights", "title": "Traffic Lights", "text": "<p>We will use 3 LEDs in this demo, and light them up one by one to show a traffic light signal.</p>"}, {"location": "workshopnano.html#ai-control-using-gestures", "title": "AI control using gestures", "text": "<ul> <li><code>Go to Visual Programming -&gt; Visual Demos -&gt; AI LED</code></li> </ul> <p>Downloading for AI assets is around 10MB, so wait for the download to complete after you grant permissions to use the selfie camera.</p> <p>Once you are able to see yourself in the screen, raise your hand, and observe the algorithm detecting the various joints in your fingers. Each joint is labelled as shown below</p> <p></p> <ul> <li>This program lights up the Onboard LED (PB5) if the index finger is extended</li> <li>To check this, we use the <code>is Index Finger Extended?</code> logic block which returns <code>true</code> if it is, and <code>false</code> if not</li> <li>It checks where the Y coordinate of joint 8 is more than the Y coordinate of joint 6. </li> <li>So when you fold your finger, 8 comes below 6, and the LED is turned off since the condition is <code>false</code></li> </ul>"}, {"location": "workshopnano.html#ai-piano", "title": "AI Piano", "text": "<p>Flex fingers one by one to play different notes on a virtual piano.</p>"}, {"location": "workshopnano.html#ai-hand-gestures", "title": "AI Hand gestures", "text": "<p>We will plot a graph of the distance between the tip of the thumb to the tip of the index finger .</p> <p></p>"}, {"location": "workshopnano.html#sensors-using-i2c-communication", "title": "Sensors using I2C communication", "text": "<ul> <li>I2C Sensors for a range of physical parameters such as pressure, acceleration etc can be connected using SCL and SDA pins.</li> <li>Use the Data Logger interface to scan for sensors and view readings</li> <li>Explore potential applications.</li> </ul>"}, {"location": "workshopnano.html#pressure-measurement-with-bmp180", "title": "Pressure measurement with BMP180", "text": "<p>In the soldering workshop, you will have connected 4 pins to a BMP180 pressure sensor. We will now learn to use it.</p> <ul> <li>This sensor uses 2 pins to exchange data with your kuttypynano</li> <li>SDA (PC4 / A4) : For data</li> <li>SCL (PC5 / A5) : Clock for synchronizing data</li> <li>You also need to connect 5V and GND for power supply to your sensor.</li> <li>Total Connections are as follows</li> <li>5V -&gt; VCC</li> <li>GND -&gt; GND</li> <li>SCL -&gt; SCL</li> <li>SDA -&gt; SDA</li> </ul> <p></p>"}, {"location": "workshopnano.html#basic-c-code", "title": "Basic C code", "text": "<p>This is not covered in this tutorial, but a precompiled code for blinking LEDs on pins PD0-PD6 is part of the app. To upload this code to your device, go to the home page, and click the menu at the top  right corner</p> <ul> <li>Upload HEX -&gt;LED Display 328p</li> <li>Click on the menu again, and click on disconnect.</li> <li>Your program is now running. :)</li> </ul>"}]}